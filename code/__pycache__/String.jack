// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
     field int maxLength;
     field int length;
     field Array str;
    constructor String new(int maxLength) {
        let maxLength = maxLength;
        let length = 0;
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxLength) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int continue;
        var int result;
        var boolean isNegative;
        let isNegative = false;
        let i = 0;
        let continue = 1;
        let result = 0;
        while(i < length and continue = 1) {
            if((i = 0) & (str[i] = "-")) {
                let isNegative = true;
            } else {
                if((str[i] >= "0") & (str[i] <= "9")) {
                    let result = result * 10 + (str[i] - "0");
                } else {
                    let continue = 0;
                }
            }
            let i = i + 1;
        }
        if(isNegative) {
            return -result;
        } else {
            return result;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i;
        var int j;
        var int k;
        var int digit;
        var int isNegative;
        var Array temp;
        let i = 0;
        let j = 0;
        let k = 0;
        let isNegative = 0;
        let temp = Array.new(maxLength);
        if(val < 0) {
            let isNegative = 1;
            let val = -val;
        }
        if(val = 0) {
            let str[0] = "0";
            let length = 1;
        } else {
            while(val > 0) {
                let digit = val % 10;
                let temp[i] = digit + "0";
                let i = i + 1;
                let val = val / 10;
            }
            if(isNegative) {
                let str[0] = "-";
                let j = 1;
            }
            while(i > 0) {
                let str[j] = temp[i - 1];
                let j = j + 1;
                let i = i - 1;
            }
            let length = j;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
       return "\n";
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return "\b";
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
